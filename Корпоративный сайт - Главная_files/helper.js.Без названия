// *********************************************************************************************************************
// General
// *********************************************************************************************************************


// *********************************************************************************************************************
// Functions
// *********************************************************************************************************************
/**
 *	jQuery select2
 */
function wdSeoSelect2(select, config){
	var
		select2 = $(select),
		ajaxUrl = select2.attr('data-wd-seo-ajax-url'),
		ajaxCount = parseInt(select2.attr('data-wd-seo-ajax-count'));
	ajaxCount = !isNaN(ajaxCount) ? ajaxCount : 20;
	if(!select2.hasClass('select2-hidden-accessible')){
		// Prepare
		if(!select2.parent().is('div')){
			select2.wrap('<div/>');
		}
		select2.parent().addClass('wd_seo_select2');
		// Get width
		var div = $('<div/>').css({height: '0', overflow: 'hidden', width: screen.width}).appendTo($('body')),
			selectTmp = select2.clone().removeAttr('id').appendTo(div),
			width = selectTmp.width();
		div.remove();
		// Config
		config = $.extend({}, {
			dropdownAutoWidth: true,
			dropdownParent: select2.parent(),
			language: phpVars.LANGUAGE_ID,
			matcher:function(params, item){
				function optionIsMatch(option, search){
					return [option.text, option.id, option.title].join(' ').toUpperCase().indexOf(searchText) != -1;
				}
				if(params.term == undefined || !params.term.length){
					return item;
				}
				if(item.id == ''){
					return null;
				}
				var searchText = params.term.toUpperCase();
				if(item.element.tagName.toLowerCase() == 'option'){
					if(optionIsMatch(item.element, searchText)) {
						return item;
					}
				}
				else if(item.element.tagName.toLowerCase() == 'optgroup' && Array.isArray(item.children)){
					var filteredOptions = [];
					$.each(item.children, function (index, option) {
						if(optionIsMatch(option, searchText)) {
							filteredOptions.push(option);
						}
					});
					if(filteredOptions.length) {
						var modifiedItem = $.extend({}, item, true);
						modifiedItem.children = filteredOptions;
						return modifiedItem;
					}
				}
				return null;
			},
			templateResult: function(item){
				if(item.loading || $(item.element).is('optgroup') || !item.id.length) {
					return item.text;
				}
				let result = $('<li/>').text(item.text);
				for(let i in item){
					if(i.match(/^data\-([A-z0-0-_]+)$/)){
						result.attr(i, item[i]);
					}
				}
				return result;
			},
		}, config);
		if(ajaxUrl != undefined){
			config.ajax = {
				url: ajaxUrl,
				type: 'post',
				dataType: 'json',
				data: function (params) {
					let
						attributes = select.attributes,
						ignoreAttributes = ['url', 'count'],
						query = $.extend({}, {
							q: params.term,
							page: params.page
						});
					for(let i in attributes){
						if(typeof attributes[i] == 'object'){
							if(match = attributes[i].name.match(/^data\-wd\-seo\-ajax-([A-z0-9-_]+)$/)){
								if(ignoreAttributes.indexOf(match[1]) == -1){
									query[match[1]] = attributes[i].value;
								}
							}
						}
					}
					return query;
				},
				processResults: function(data, params) {
					params.page = params.page || 1;
					return {
						results: data.items,
						pagination: {
							more: (params.page * ajaxCount) < data.total_count
						}
					};
				},
				cache: false
			};
		}
		select2.select2(config);
		select2.next('.select2').css({'min-width': width + 10, 'max-width': '600px'});
	}
	return select2;
}
if(typeof $ == 'function' && $.fn.jquery){
	$(document).ready(function(){
		$('select[data-wd-seo-select2="Y"]').each(function(){
			wdSeoSelect2(this);
		});
	});
}

/**
 *	Ajax query
 */
function wdSeoAjax(action, get, post, callbackSuccess, callbackError, hideLoader) {
	let
		url = location.href;
	get = get != null && typeof get == 'object' ? get : {};
	post = post != null && typeof get == 'object' ? post : {};
	if(typeof action == 'string' && action.substr(0, 1) == '/'){
		url = action;
	}
	else if(action !== null){
		get.ajax_action = action;
	}
	url = wdSeoHttpBuildQuery(url, get);
	if(hideLoader!==true) {
		BX.showWait();
	}
	return BX.ajax({
		url: url,
		method: 'POST',
		data: post,
		dataType: 'json',
		timeout: 30,
		async: true,
		processData: true,
		scriptsRunFirst: false,
		emulateOnload: false,
		start: true,
		cache: false,
		onsuccess: function(json){
			if(typeof callbackSuccess == 'function') {
				callbackSuccess(json);
			}
			if(hideLoader!==true) {
				BX.closeWait();
			}
		},
		onfailure: function(status, error, config){
			console.error(status, error, config);
			if(typeof callbackError == 'function') {
				callbackError(status, error, config);
			}
			if(hideLoader!==true) {
				BX.closeWait();
			}
		}
	});
}

/**
 *	Build http query
 */
function wdSeoHttpBuildQuery(url, params) {
	let
		query = Object.keys(params)
			.map(function(k) {return encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);})
			.join('&');
	url = url.split('#')[0] + (query.length ? (url.indexOf('?') == -1 ? '?' : '&') + query : '');
	url = url.replace('?&', '?');
	return url;
}

/**
 *	Analog to Bitrix CMain::getCurPageParam
 */
function wdSeoGetCurPageParam(strAdd, arRemove, bAtTheEnd){
	let
		arData = [];
		arDataTmp = [],
		arGetParts = location.search.substr(1).split('&'),
		strQuery = '',
		strName = null,
		item = null;
	strAdd = typeof strAdd == 'string' ? strAdd : strAdd.toString();
	arRemove = typeof arRemove == 'object' ? arRemove : [arRemove];
	bAtTheEnd = bAtTheEnd === true ? true : false;
	for(let i in arGetParts){
		if(arGetParts[i].length){
			item = arGetParts[i].split('=');
			arDataTmp.push({
				name: item[0],
				value: decodeURIComponent(item[1])
			});
		}
	}
	for(let i in arDataTmp){
		strName = arDataTmp[i].name.split('[')[0],
			bDelete = false;
		for(let j in arRemove){
			if(arRemove[j] == strName){
				bDelete = true;
				break;
			}
		}
		if(!bDelete){
			arData.push(arDataTmp[i]);
		}
	}
	for(let i in arData){
		strQuery += '&' + arData[i].name + '=' + encodeURIComponent(arData[i].value);
	}
	strQuery = strQuery.substr(1);
	if(bAtTheEnd){
		strQuery = (strQuery.length ? strQuery + '&' : '') + strAdd;
	}
	else{
		strQuery = strAdd + (strQuery.length ? '&' + strQuery : '');
	}
	if(strQuery.substr(0, 1) == '&'){
		strQuery = strQuery.substr(1);
	}
	if(strQuery.length){
		strQuery = '?' + strQuery;
	}
	return location.href.split('?')[0] + strQuery;
}

/**
 *	Change url
 *	wdSeoChangeUrl('lang', 'ru')
 *	wdSeoChangeUrl({lang:'ru', test:'ok'})
 */
function wdSeoChangeUrl(key, value, bAtTheEnd){
	let
		newUrl;
	bAtTheEnd = bAtTheEnd === true ? true : false;
	if(document.readyState == 'complete') {	
		if(value === undefined || value === null){ // key is array of key => value
			let
				keys = [],
				values = [];
			for(let i in key){
				if(key.hasOwnProperty(i)){
					keys.push(i);
					values.push(typeof key[i] == 'number' && value > 0 || typeof key[i] == 'string' ? i+'='+encodeURIComponent(key[i]) : '');
				}
			}
			values = values.filter(function(item){return item.length;});
			newUrl = wdSeoGetCurPageParam(values.join('&'), keys, bAtTheEnd);
		}
		else{ // default mode key is key, value is value
			value = (typeof value == 'number' && value > 0 || typeof value == 'string' ? key+'='+encodeURIComponent(value) : '');
			newUrl = wdSeoGetCurPageParam(value, [key], bAtTheEnd);
		}
		window.history.replaceState('', '', newUrl);
	}
	return newUrl;
}

function wdSeoDeserialize(query) {
	var pairs, i, keyValuePair, key, value, map = {};
	if (query.slice(0, 1) === '?') {
		query = query.slice(1);
	}
	if (query !== '') {
		pairs = query.split('&');
		for (i = 0; i < pairs.length; i += 1) {
			keyValuePair = pairs[i].split('=');
			key = decodeURIComponent(keyValuePair[0]);
			value = (keyValuePair.length > 1) ? decodeURIComponent(keyValuePair[1]) : undefined;
			map[key] = value;
		}
	}
	return map;
}

function wdSeoHtmlSpecialChars(text){
  return text
		.replace(/&/g, "&amp;")
		.replace(/</g, "&lt;")
		.replace(/>/g, "&gt;")
		.replace(/"/g, "&quot;")
		.replace(/'/g, "&#039;");
}

function wdSeoDisableButton(button, flag, loader){
	flag = !!flag;
	loaded = !!loader;
	if(typeof button == 'string'){
		button = BX(button);
	}
	if(flag){
		BX.adjust(button, {attrs:{disabled:true}});
		BX.addClass(button, 'adm-btn-load');
		if(loader){
			let divLoader = BX.create('DIV');
			let rect = button.getBoundingClientRect();
			BX.adjust(divLoader, {attrs:{
				class:'adm-btn-load-img-green',
			},style:{
				top:'19'+'px',
				left:(rect.width-20)/2+'px',
			}});
			BX.insertAfter(divLoader, button);
		}
	}
	else{
		BX.adjust(button, {attrs:{disabled:false}});
		BX.removeClass(button, 'adm-btn-load');
		if(loader){
			if(button.parentNode.querySelector('.adm-btn-load-img-green')){
				BX.remove(button.parentNode.querySelector('.adm-btn-load-img-green'));
			}
		}
	}
}


// *********************************************************************************************************************
// jQuery Extensions
// *********************************************************************************************************************
// https://gist.github.com/mathiasbynens/326491
if(typeof $ == 'function' && $.fn.jquery){
	$.fn.wdSeoInsertAtCaret = function(myValue) {
		return this.each(function() {
			var me = this;
			if (document.selection) { // IE
				me.focus();
				sel = document.selection.createRange();
				sel.text = myValue;
				me.focus();
			} else if (me.selectionStart || me.selectionStart == '0') { // Real browsers
				var startPos = me.selectionStart, endPos = me.selectionEnd, scrollTop = me.scrollTop;
				me.value = me.value.substring(0, startPos) + myValue + me.value.substring(endPos, me.value.length);
				me.focus();
				me.selectionStart = startPos + myValue.length;
				me.selectionEnd = startPos + myValue.length;
				me.scrollTop = scrollTop;
			} else {
				me.value += myValue;
				me.focus();
			}
		});
	};
}
// https://stackoverflow.com/questions/5392344/sending-multipart-formdata-with-jquery-ajax
if(typeof $ == 'function' && $.fn.jquery){
	$.fn.serializeFiles = function() {
		var obj = $(this);
		/* ADD FILE TO PARAM AJAX */
		var formData = new FormData();
		$.each($(obj).find("input[type='file']"), function(i, tag) {
				$.each($(tag)[0].files, function(i, file) {
						formData.append(tag.name, file);
				});
		});
		var params = $(obj).serializeArray();
		$.each(params, function (i, val) {
				formData.append(val.name, val.value);
		});
		return formData;
	};
}

// *********************************************************************************************************************
// General DOMReady
// *********************************************************************************************************************



// *********************************************************************************************************************
// Default popup
// *********************************************************************************************************************

let wdSeoAdminPopup = BX.CDialog;

/**
 *	Build URL for AJAX
 */
wdSeoAdminPopup.prototype.WdHttpBuildQuery = function(url, params) {
	return wdSeoHttpBuildQuery(url, params);
}

/**
 *	Load content via AJAX
 */
wdSeoAdminPopup.prototype.WdLoadContentAjax = function(action, get, post, callbackSuccess, callbackError, hideLoader) {
	let popup = this;
	get = typeof get == 'object' ? get : {};
	post = typeof get == 'object' ? post : {};
	if(typeof action == 'object' && action !== null){
		get.ajax_action = action[0];
		get.ajax_action_sub = action[1];
	}
	else if(typeof action == 'string'){
		get.ajax_action = action;
	}
	let ajaxParams = {
		url: popup.WdHttpBuildQuery(location.href, get),
		method: 'POST',
		data: post,
		dataType: 'json',
		timeout: 30,
		async: true,
		processData: true,
		scriptsRunFirst: false,
		emulateOnload: false,
		start: true,
		cache: false,
		onsuccess: function(json){
			if(typeof json == 'object' && json !== null){
				if(typeof json.Title != 'undefined'){
					popup.WdSetTitle(json.Title);
				}
				if(typeof callbackSuccess == 'function') {
					callbackSuccess(json);
				}
				else if(typeof json.Content != 'undefined'){
					popup.WdSetContent(json.Content, true);
				}
				else if(typeof json.Html != 'undefined'){
					popup.WdSetContent(json.Html, true);
				}
			}
			else{
				this.onfailure(this.xhr.status, {data:this.xhr.response}, this);
			}
		},
		onfailure: function(status, error, config){
			console.error(status, error, config);
			if(typeof callbackError == 'function') {
				callbackError(status, error, config);
			}
			else if(typeof error.data == 'string' && error.data.length > 0){
				popup.WdSetContent('<div class="wd_seo_bx_dialog_content_preformat" style="font-family:monospace;">'+error.data+'</div>', false);
				popup.WdSetTitle('Error');
			}
			else{
				console.error(status, error, config);
			}
			if(hideLoader!==true) {
				BX.closeWait();
			}
		}
	};
	if(typeof post == 'object' && post.constructor.name == 'FormData'){
		ajaxParams.processData = false;
		ajaxParams.contentType = false;
	}
	return BX.ajax(ajaxParams);
}

/**
 *	Set title (considering HTML)
 */
wdSeoAdminPopup.prototype.WdSetTitle = function(title) {
	let nodes = this.PARTS.TITLEBAR.querySelectorAll('.bx-core-adm-dialog-head-inner');
	for(let i=0; i<nodes.length; i++) {
		nodes[i].innerHTML = title;
	}
}

/**
 *	Set content (and set height 100%)
 */
wdSeoAdminPopup.prototype.WdSetContent = function(html, incapsulateJavaScript) {
	let nodes = this.PARTS.CONTENT_DATA.querySelectorAll('.bx-core-adm-dialog-content-wrap-inner');
	for(let i=0; i<nodes.length; i++) {
		nodes[i].innerHTML = '<div class="wd_seo_bx_dialog_content">' + html + '</div>';
		nodes[i].style.boxSizing = 'border-box';
		nodes[i].style.height = '100%';
		for(let j=0; j<nodes[i].childNodes.length; j++) {
			if(nodes[i].childNodes[j].nodeType == 1){
				nodes[i].childNodes[j].style.height = '100%';
			}
		}
		let scripts = nodes[i].querySelectorAll('script');
		if(scripts.length){
			for(let j=0; j<scripts.length; j++) {
				let script = document.createElement('script');
				if(typeof scripts[j].src == 'string' && scripts[j].src.length){
					script.src = scripts[j].src;
				}
				script.text = scripts[j].text;
				if(incapsulateJavaScript == true){
					script.text = '(function(){' + scripts[j].text + '})();';
				}
				scripts[j].parentNode.replaceChild(script, scripts[j]);
			}
		}
		let checkboxes = this.PARTS.CONTENT_DATA.querySelectorAll('input[type="checkbox"]');
		for(let j=0; j<checkboxes.length; j++) {
			BX.adminFormTools.modifyCheckbox(checkboxes[j]);
		}
	}
	let inputs = this.PARTS.CONTENT_DATA.querySelectorAll('input[type=text],textarea');
	setTimeout(function(){
		for(let i=0; i<inputs.length; i++) {
			inputs[i].focus();
			inputs[i].setSelectionRange(inputs[i].value.length, inputs[i].value.length);
			break;
		}
	}, 1);
}

/**
 *	Set nav buttons
 */
wdSeoAdminPopup.prototype.WdSetNavButtons = function(buttons) {
	let
		empty = buttons == undefined || typeof(buttons) != 'object' || !buttons.length,
		container = this.PARTS.BUTTONS_CONTAINER;
	container.innerHTML = '';
	if(empty) {
		container.insertAdjacentHTML('beforeEnd', '<input type="button" value="0" style="visibility:hidden;" />');
	}
	else if(typeof(buttons) == 'object' || buttons.length){
		this.SetButtons(buttons);
		container.insertAdjacentHTML('beforeEnd', '<div style="clear:both"/>');
	}
}

// *********************************************************************************************************************
// Popups
// *********************************************************************************************************************



